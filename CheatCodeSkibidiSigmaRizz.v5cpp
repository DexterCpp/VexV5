{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor LeftMotorM = motor(PORT11, ratio18_1, false);\n\nmotor RightMotorM = motor(PORT19, ratio18_1, true);\n\nmotor Lower = motor(PORT17, ratio6_1, false);\n\nmotor Upper = motor(PORT8, ratio6_1, false);\n\nmotor LeftMotorB = motor(PORT12, ratio18_1, false);\n\nmotor RightMotorB = motor(PORT20, ratio18_1, true);\n\nmotor Storage = motor(PORT6, ratio18_1, false);\n\ndigital_out Mouth = digital_out(Brain.ThreeWirePort.A);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project: CheatCodeSkibidiSigmaRizz                                      \n//    Author: DexDaDev\n//    Created: Sep 12, 2025\n//    Configuration: \n//                                                                            \n// ----------------------------------------------------------------------------\n\n#include \"vex.h\"\nusing namespace vex;\n\ncompetition Competition;\n\n/*---------------------------------------------------------------------------*/\n/*                                 Variables                                 */\n/*---------------------------------------------------------------------------*/\nconst int CONTROL_LOOP_MS = 20;\nbool DriveMode = true;\n/*---------------------------------------------------------------------------*/\n/*                                 Functions                                 */\n/*---------------------------------------------------------------------------*/\n\nvoid GetBall(void){\n  Lower.spin(forward, 100, percent);\n  Upper.spin(forward, 80, percent);\n  Storage.spin(reverse, 100, percent);\n}\nvoid GetBall2(void){\n  Lower.spin(forward, 100, percent);\n  Upper.spin(forward, 80, percent);\n}\n\nvoid LowTube(void){\n  Lower.spin(reverse, 100, percent);\n  Upper.spin(forward, 100, percent);\n  Storage.spin(forward, 100, percent);\n}\n\nvoid MidTube(void){\n  Lower.spin(forward, 100, percent);\n  Upper.spin(reverse, 100, percent);\n  Storage.spin(forward, 100, percent);\n}\n\nvoid HighTube(void){\n  Lower.spin(forward, 100, percent);\n  Upper.spin(forward, 100, percent);\n    Storage.spin(forward, 100, percent);\n}\n\nvoid StopMotor(void){\n  Lower.stop(brakeType::coast);\n  Upper.stop(brakeType::coast);\n  Storage.stop(brakeType::coast);\n}\nbool mouthStatus = false;\nvoid OpenMouth(void){\n  mouthStatus = !mouthStatus;\n  Mouth.set(mouthStatus);\n}\nvoid TurnAround(void){\n\n}\n\nvoid ArcadeDrive(void){  // True\n    int front = Controller1.Axis3.position(percent);\n    int turn = Controller1.Axis1.position(percent); \n\n    int leftSpeed = front + turn;\n    int rightSpeed = front - turn;\n\n    if(leftSpeed > 100) leftSpeed = 100;\n    if(leftSpeed < -100) leftSpeed = -100;\n    if(rightSpeed > 100) rightSpeed = 100;\n    if(rightSpeed < -100) rightSpeed = -100;\n\n    LeftMotorM.spin(fwd, leftSpeed, percent);\n    LeftMotorB.spin(fwd, leftSpeed, percent);\n    RightMotorM.spin(fwd, rightSpeed, percent);\n    RightMotorB.spin(fwd, rightSpeed, percent);\n}\n\n\nvoid TankDrive(void){ // False\n    int leftSpeed = Controller1.Axis3.position(percent);\n    int rightSpeed = Controller1.Axis2.position(percent);\n\n\n    LeftMotorM.spin(fwd, leftSpeed, percent);\n    LeftMotorB.spin(fwd, leftSpeed, percent);\n    RightMotorM.spin(fwd, rightSpeed, percent);\n    RightMotorB.spin(fwd, rightSpeed, percent);\n}\n\nvoid Change_DriveMode(void){\n  DriveMode = !DriveMode;\n  if (DriveMode == true) Controller1.Screen.print(\"Controller Mode: Arcade\");\n  else Controller1.Screen.print(\"Controller Mode: Tank\");\n}\n\nvoid ButtonFunction(void){\n  if (Controller1.ButtonX.pressing()) {\n    GetBall();\n  }\n  else if (Controller1.ButtonY.pressing()) {\n    LowTube();\n  }\n  else if (Controller1.ButtonA.pressing()) {\n    MidTube();\n  }\n  else if (Controller1.ButtonB.pressing()) {\n    HighTube();\n  }\n  else {\n    StopMotor();\n  }\n  Controller1.ButtonL1.pressed(Change_DriveMode);\n  Controller1.ButtonL2.pressed(OpenMouth);\n}\nvoid Notification(void){\n  Controller1.rumble(\".-.-\");\n  Brain.Screen.clearScreen();\n  Controller1.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n  Controller1.Screen.setCursor(1, 1);\n  Controller1.Screen.print(\"Welcome back SigmaDuong!!\");\n  Controller1.Screen.newLine();\n  Controller1.Screen.print(\"User Control Mode\");\n    wait(1000,msec);\n  Controller1.Screen.clearScreen();\n}\nvoid preAutonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  wait(1, seconds);\n}\n\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  // place automonous code here\n\n}\n\nvoid userControl(void) {\n  Notification();\n  while(true){\n    if (DriveMode == true) ArcadeDrive();\n    else TankDrive();\n    ButtonFunction();\n    wait(CONTROL_LOOP_MS,msec);\n  }\n}\n\nsigned main() {\n  // Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n  while (true){\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[11],"name":"LeftMotorM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[19],"name":"RightMotorM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[17],"name":"Lower","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8],"name":"Upper","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[12],"name":"LeftMotorB","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[20],"name":"RightMotorB","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"Storage","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"Mouth","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.61.0","minVersion":"4.60.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null},"target":"Physical"}